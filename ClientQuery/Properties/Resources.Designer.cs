//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientQuery.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ClientQuery.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: auth apikey={string}
        ///
        ///Authenticates connecting application with API key of user.
        ///
        ///Example:
        ///   auth apikey=AAAA-BBBB-CCCC-DDDD-EEEE
        ///   error id=0 msg=ok.
        /// </summary>
        public static string auth {
            get {
                return ResourceManager.GetString("auth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: banadd [ip={regexp}] [name={regexp}] [uid={clientUID}] 
        ///       [time={timeInSeconds}] [banreason={text}]
        ///
        ///Adds a new ban rule on the selected virtual server. All parameters are optional 
        ///but at least one of the following must be set: ip, name, or uid.
        ///
        ///Example:
        ///   banadd ip=1.2.3.4 banreason=just\s4\sfun
        ///   banid=1
        ///   error id=0 msg=ok.
        /// </summary>
        public static string banadd {
            get {
                return ResourceManager.GetString("banadd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: banclient clid={clientID}|cldbid={clientDatabaseID}|uid={clientUID} \
        ///                 [time={timeInSeconds}] [banreason={text}]
        ///
        ///Bans the client specified with ID clid from the server. Please note that this 
        ///will create two separate ban rules for the targeted clients IP address and his 
        ///unique identifier.
        ///
        ///Note that banning via cldbid parameter requires a 3.0.1 server version.
        ///Note that banning via uid parameter requires a 3.0.2 server version.
        ///
        ///Example:
        ///   banclient clid=4 time=3600
        ///    [rest of string was truncated]&quot;;.
        /// </summary>
        public static string banclient {
            get {
                return ResourceManager.GetString("banclient", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: bandel banid={banID}
        ///
        ///Deletes the ban rule with ID banid from the server.
        ///
        ///Example:
        ///   bandel banid=3
        ///   error id=0 msg=ok.
        /// </summary>
        public static string bandel {
            get {
                return ResourceManager.GetString("bandel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: bandelall
        ///
        ///Deletes all active ban rules from the server.
        ///
        ///Example:
        ///   bandelall
        ///   error id=0 msg=ok.
        /// </summary>
        public static string bandelall {
            get {
                return ResourceManager.GetString("bandelall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: banlist
        ///
        ///Displays a list of active bans on the selected virtual server.
        ///
        ///Example:
        ///   banlist
        ///   banid=7 ip=1.2.3.4 created=1259444002242 invokername=Sven invokercldbid=56 
        ///   invokeruid=oHhi9WzXLNEFQOwAu4JYKGU+C+c= reason enforcements=0
        ///   error id=0 msg=ok.
        /// </summary>
        public static string banlist {
            get {
                return ResourceManager.GetString("banlist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: channeladdperm cid={channelID} ( permid={permID}|permsid={permName}
        ///       permvalue={permValue} )...
        ///
        ///Adds a set of specified permissions to a channel. Multiple permissions can be 
        ///added by providing the two parameters of each permission. A permission can be 
        ///specified by permid or permsid.
        ///
        ///Example:
        ///   channeladdperm cid=16 permsid=i_client_needed_join_power permvalue=50
        ///   error id=0 msg=ok.
        /// </summary>
        public static string channeladdperm {
            get {
                return ResourceManager.GetString("channeladdperm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: channelclientaddperm cid={channelID} cldbid={clientDBID} 
        ///       ( permid={permID}|permsid={permName} permvalue={permValue} )...
        ///
        ///Adds a set of specified permissions to a client in a specific channel. Multiple 
        ///permissions can be added by providing the two parameters of each permission. A 
        ///permission can be specified by permid or permsid.
        ///
        ///Example:
        ///   channelclientaddperm cid=12 cldbid=3 permsid=i_icon_id permvalue=100
        ///   error id=0 msg=ok.
        /// </summary>
        public static string channelclientaddperm {
            get {
                return ResourceManager.GetString("channelclientaddperm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: channelclientdelperm cid={channelID} cldbid={clientDBID}
        ///       permid={permID}|permsid={permName}...
        ///
        ///Removes a set of specified permissions from a client in a specific channel. 
        ///Multiple permissions can be removed at once. A permission can be specified 
        ///by permid or permsid.
        ///
        ///Example:
        ///   channelclientdelperm cid=12 cldbid=3 permsid=i_icon_id|permsid=b_icon_manage
        ///   error id=0 msg=ok.
        /// </summary>
        public static string channelclientdelperm {
            get {
                return ResourceManager.GetString("channelclientdelperm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: channelclientlist cid=&lt;cID&gt; [-uid] [-away] [-voice] [-groups] [-icon] [-country]
        ///
        ///Displays a list of clients that are in the channel specified by the cid
        ///parameter. Included information is the clientID, client database id, nickname,
        ///channelID and client type.
        ///Please take note that you can only view clients in channels that you are
        ///currently subscribed to.
        ///
        ///Here is a list of the additional display paramters you will receive for
        ///each of the possible modifier parameters.
        ///
        ///-uid:
        ///client_unique [rest of string was truncated]&quot;;.
        /// </summary>
        public static string channelclientlist {
            get {
                return ResourceManager.GetString("channelclientlist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: channelclientpermlist cid={channelID} cldbid={clientDBID} [-permsid]
        ///
        ///Displays a list of permissions defined for a client in a specific channel.
        ///
        ///Example:
        ///   channelclientpermlist cid=12 cldbid=3
        ///   cid=12 cldbid=3 permid=4353 permvalue=1 permnegated=0 permskip=0|permid=17276 
        ///   permvalue=50 permnegated=0 permskip=0|permid=21415 ...
        ///   error id=0 msg=ok.
        /// </summary>
        public static string channelclientpermlist {
            get {
                return ResourceManager.GetString("channelclientpermlist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: channelconnectinfo [cid={channelid}]
        ///
        ///Get channel connection information for specified channelid from the currently
        ///selected server connection handler. If no channelid is provided, information
        ///for the current channel will be received.
        ///
        ///Example:
        ///   channelconnectinfo
        ///   path=test\/subtest password=secret
        ///   error id=0 msg=ok.
        /// </summary>
        public static string channelconnectinfo {
            get {
                return ResourceManager.GetString("channelconnectinfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: channelcreate channel_name={channelName} [channel_properties...]
        ///
        ///Creates a new channel using the given properties and displays its ID.
        ///
        ///N.B. The channel_password property needs a hashed password as a value.
        ///The hash is a sha1 hash of the password, encoded in base64. You can 
        ///use the &quot;hashpassword&quot; command to get the correct value.
        ///
        ///Example:
        ///   channelcreate channel_name=My\sChannel channel_topic=My\sTopic
        ///   cid=16
        ///   error id=0 msg=ok.
        /// </summary>
        public static string channelcreate {
            get {
                return ResourceManager.GetString("channelcreate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: channeldelete cid={channelID} force={1|0}
        ///
        ///Deletes an existing channel by ID. If force is set to 1, the channel will be 
        ///deleted even if there are clients within.
        ///
        ///Example:
        ///   channeldelete cid=16 force=1
        ///   error id=0 msg=ok.
        /// </summary>
        public static string channeldelete {
            get {
                return ResourceManager.GetString("channeldelete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: channeldelperm cid=123 permid={permID}|permsid={permName}...
        ///
        ///Removes a set of specified permissions from a channel. Multiple permissions 
        ///can be removed at once. A permission can be specified by permid or permsid.
        ///
        ///Example:
        ///   channeldelperm cid=16 permsid=i_icon_id|permsid=i_client_needed_talk_power
        ///   error id=0 msg=ok.
        /// </summary>
        public static string channeldelperm {
            get {
                return ResourceManager.GetString("channeldelperm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: channeledit cid={channelID} [channel_properties...]
        ///
        ///Changes a channels configuration using given properties.
        ///
        ///Example:
        ///   channeledit cid=15 channel_codec_quality=3 channel_description=My\stext
        ///   error id=0 msg=ok.
        /// </summary>
        public static string channeledit {
            get {
                return ResourceManager.GetString("channeledit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: channelgroupadd name={groupName} [type={groupDbType}]
        ///
        ///Creates a new channel group using a given name and displays its ID. The 
        ///optional type parameter can be used to create ServerQuery groups and template 
        ///groups.
        ///
        ///Example:
        ///   channelgroupadd name=Channel\sAdmin
        ///   cgid=13
        ///   error id=0 msg=ok.
        /// </summary>
        public static string channelgroupadd {
            get {
                return ResourceManager.GetString("channelgroupadd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: channelgroupaddperm cgid={groupID} ( permid={permID}|permsid={permName}
        ///       permvalue={permValue} )...
        ///
        ///Adds a set of specified permissions to a channel group. Multiple permissions 
        ///can be added by providing the two parameters of each permission. A permission 
        ///can be specified by permid or permsid.
        ///
        ///Example:
        ///   channelgroupaddperm cgid=78 permsid=b_icon_manage permvalue=1
        ///   error id=0 msg=ok.
        /// </summary>
        public static string channelgroupaddperm {
            get {
                return ResourceManager.GetString("channelgroupaddperm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: channelgroupclientlist [cid={channelID}] [cldbid={clientDBID}] 
        ///       [cgid={groupID}]
        ///
        ///Displays all the client and/or channel IDs currently assigned to channel 
        ///groups. All three parameters are optional so you&apos;re free to choose the most 
        ///suitable combination for your requirements.
        ///
        ///Example:
        ///   channelgroupclientlist cid=2 cgid=9
        ///   cid=2 cldbid=9 cgid=9|cid=2 cldbid=24 cgid=9|cid=2 cldbid=47 cgid=9
        ///   error id=0 msg=ok.
        /// </summary>
        public static string channelgroupclientlist {
            get {
                return ResourceManager.GetString("channelgroupclientlist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: channelgroupdel cgid={groupID} force={1|0}
        ///
        ///Deletes a channel group by ID. If force is set to 1, the channel group will be 
        ///deleted even if there are clients within.
        ///
        ///Example:
        ///   channelgroupdel cgid=13
        ///   error id=0 msg=ok.
        /// </summary>
        public static string channelgroupdel {
            get {
                return ResourceManager.GetString("channelgroupdel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: channelgroupdelperm cgid={groupID} [permid={permID}...] 
        ///       [permsid={permName}...]
        ///
        ///Removes a set of specified permissions from the channel group. Multiple 
        ///permissions can be removed at once. A permission can be specified by 
        ///permid or permsid.
        ///
        ///Example:
        ///   channelgroupdelperm cgid=16 permid=17276|permid=21415
        ///   error id=0 msg=ok.
        /// </summary>
        public static string channelgroupdelperm {
            get {
                return ResourceManager.GetString("channelgroupdelperm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: channelgrouplist
        ///
        ///Displays a list of channel groups available on the selected virtual server.
        ///
        ///Example:
        ///   channelgrouplist
        ///   cgid=1 name=Channel\sAdmin type=2 iconid=100 savedb=1|cgid=2 ...
        ///   error id=0 msg=ok.
        /// </summary>
        public static string channelgrouplist {
            get {
                return ResourceManager.GetString("channelgrouplist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: channelgrouppermlist cgid={groupID} [-permsid]
        ///
        ///Displays a list of permissions assigned to the channel group specified 
        ///with cgid.
        ///
        ///Example:
        ///   channelgrouppermlist cgid=13
        ///   permid=8470 permvalue=1 permnegated=0 permskip=0|permid=8475 ...
        ///   error id=0 msg=ok.
        /// </summary>
        public static string channelgrouppermlist {
            get {
                return ResourceManager.GetString("channelgrouppermlist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: channellist [-topic] [-flags] [-voice] [-icon] [-limits]
        ///
        ///Displays a list of channels on a server you are connected to including their
        ///ID, order, name, etc. The output can be modified using several command options.
        ///
        ///Example:
        ///   channellist -topic
        ///   cid=23 pid=0 channel_order=0 channel_name=Default\/Channel
        ///   channel_topic=Default\sChannel\shas\sno\stopic channel_flag_are_subscribed=0
        ///   error id=0 msg=ok.
        /// </summary>
        public static string channellist {
            get {
                return ResourceManager.GetString("channellist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: channelmove cid={channelID} cpid={channelParentID} 
        ///       [order={channelSortOrder}]
        ///
        ///Moves a channel to a new parent channel with the ID cpid. If order is 
        ///specified, the channel will be sorted right under the channel with the 
        ///specified ID. If order is set to 0, the channel will be sorted right below 
        ///the new parent.
        ///
        ///Example:
        ///   channelmove cid=16 cpid=1 order=0
        ///   error id=0 msg=ok.
        /// </summary>
        public static string channelmove {
            get {
                return ResourceManager.GetString("channelmove", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: channelpermlist cid={channelID} [-permsid]
        ///
        ///Displays a list of permissions defined for a channel.
        ///
        ///Example:
        ///   channelpermlist cid=2
        ///   cid=2 permid=4353 permvalue=1 permnegated=0 permskip=0|permid=17276 ...
        ///   error id=0 msg=ok.
        /// </summary>
        public static string channelpermlist {
            get {
                return ResourceManager.GetString("channelpermlist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: channelvariable ( cid={channelID} properties )...
        ///
        ///Retrieves channel variables from the client (no network usage). For each channel
        ///you can specify one or more properties that should be queried, and this whole
        ///block of channelID and properties can be repeated to get information about
        ///multiple channels with one call of channelvariable.
        ///
        ///Available properties are:
        ///channel_name
        ///channel_topic
        ///channel_description
        ///channel_codec
        ///channel_codec_quality
        ///channel_order
        ///channel_maxclients
        ///channel_ma [rest of string was truncated]&quot;;.
        /// </summary>
        public static string channelvariable {
            get {
                return ResourceManager.GetString("channelvariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: clientaddperm cldbid={clientDBID} ( permid={permID}|permsid={permName} 
        ///       permvalue={permValue} permskip={1|0} )...
        ///
        ///Adds a set of specified permissions to a client. Multiple permissions can be 
        ///added by providing the three parameters of each permission. A permission can 
        ///be specified by permid or permsid.
        ///
        ///Example:
        ///   clientaddperm cldbid=16 permsid=i_client_talk_power permvalue=5 permskip=1
        ///   error id=0 msg=ok.
        /// </summary>
        public static string clientaddperm {
            get {
                return ResourceManager.GetString("clientaddperm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: clientdbdelete cldbid={clientDBID}
        ///
        ///Deletes a clients properties from the database.
        ///
        ///Example:
        ///   clientdbdelete cldbid=56
        ///   error id=0 msg=ok.
        /// </summary>
        public static string clientdbdelete {
            get {
                return ResourceManager.GetString("clientdbdelete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: clientdbedit cldbid={clientDBID} [client_properties...]
        ///
        ///Changes a clients settings using given properties.
        ///
        ///Example:
        ///   clientdbedit cldbid=56 client_description=Best\sguy\sever!
        ///   error id=0 msg=ok.
        /// </summary>
        public static string clientdbedit {
            get {
                return ResourceManager.GetString("clientdbedit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: clientdblist [start={offset}] [duration={limit}] [-count]
        ///
        ///Displays a list of client identities known by the server including their 
        ///database ID, last nickname, etc.
        ///
        ///Example:
        ///   clientdblist
        ///   cldbid=7 client_unique_identifier=DZhdQU58qyooEK4Fr8Ly738hEmc= 
        ///   client_nickname=MuhChy client_created=1259147468 ...
        ///   error id=0 msg=ok.
        /// </summary>
        public static string clientdblist {
            get {
                return ResourceManager.GetString("clientdblist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: channeldelperm cldbid={clientDBID} permid={permID}|permsid={permName}...
        ///
        ///Removes a set of specified permissions from a client. Multiple permissions 
        ///can be removed at once. A permission can be specified by permid or permsid.
        ///
        ///Example:
        ///   clientdelperm cldbid=16 permsid=i_icon_id|permsid=b_icon_manage
        ///   error id=0 msg=ok.
        /// </summary>
        public static string clientdelperm {
            get {
                return ResourceManager.GetString("clientdelperm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: clientgetdbidfromuid cluid={clientUID}
        ///
        ///Displays the database ID matching the unique identifier specified by cluid.
        ///
        ///Example:
        ///   clientgetdbidfromuid cluid=dyjxkshZP6bz0n3bnwFQ1CkwZOM=
        ///   cluid=dyjxkshZP6bz0n3bnwFQ1CkwZOM= cldbid=32
        ///   error id=0 msg=ok.
        /// </summary>
        public static string clientgetdbidfromuid {
            get {
                return ResourceManager.GetString("clientgetdbidfromuid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: clientgetids cluid={clientUID}
        ///
        ///Displays all client IDs matching the unique identifier specified by cluid.
        ///
        ///Example:
        ///   clientgetids cluid=dyjxkshZP6bz0n3bnwFQ1CkwZOM=
        ///   cluid=dyjxkshZP6bz0n3bnwFQ1CkwZOM= clid=1 name=Janko
        ///   error id=0 msg=ok.
        /// </summary>
        public static string clientgetids {
            get {
                return ResourceManager.GetString("clientgetids", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: clientgetnamefromdbid cldbid={clientDBID}
        ///
        ///Displays the unique identifier and nickname matching the database ID specified 
        ///by cldbid.
        ///
        ///Example:
        ///   clientgetnamefromdbid cldbid=32
        ///   cluid=dyjxkshZP6bz0n3bnwFQ1CkwZOM= cldbid=32 name=Janko
        ///   error id=0 msg=ok.
        /// </summary>
        public static string clientgetnamefromdbid {
            get {
                return ResourceManager.GetString("clientgetnamefromdbid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: clientgetnamefromuid cluid={clientUID}
        ///
        ///Displays the database ID and nickname matching the unique identifier specified 
        ///by cluid.
        ///
        ///Example:
        ///   clientgetnamefromuid cluid=dyjxkshZP6bz0n3bnwFQ1CkwZOM=
        ///   cluid=dyjxkshZP6bz0n3bnwFQ1CkwZOM= cldbid=32 name=Janko
        ///   error id=0 msg=ok.
        /// </summary>
        public static string clientgetnamefromuid {
            get {
                return ResourceManager.GetString("clientgetnamefromuid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: clientgetuidfromclid clid={clientID}
        ///
        ///Displays the unique identifier and nickname associated with the client
        ///specified by the clid parameter.
        ///
        ///Example:
        ///   clientgetuidfromclid clid=7
        ///   notifyclientuidfromclid schandlerid=5 clid=7 cluid=Fp430hbE43dHtZklxfiHkWJeQBg= nickname=TheInvisibleMan
        ///   error id=0 msg=ok.
        /// </summary>
        public static string clientgetuidfromclid {
            get {
                return ResourceManager.GetString("clientgetuidfromclid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: clientkick reasonid={4|5} [reasonmsg={text}] clid={clientID}...
        ///
        ///Kicks one or more clients specified with clid from their currently joined 
        ///channel or from the server, depending on reasonid. The reasonmsg parameter 
        ///specifies a text message sent to the kicked clients. This parameter is optional 
        ///and may only have a maximum of 40 characters.
        ///
        ///Available reasonid values are:
        ///4: Kick the client from his current channel into the default channel
        ///5: Kick the client from the server
        ///
        ///Example:
        ///   c [rest of string was truncated]&quot;;.
        /// </summary>
        public static string clientkick {
            get {
                return ResourceManager.GetString("clientkick", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: clientlist [-uid] [-away] [-voice] [-groups] [-icon] [-country]
        ///
        ///Displays a list of clients that are known. Included information is the
        ///clientID, nickname, client database id, channelID and client type.
        ///Please take note that the output will only contain clients which are in
        ///channels you are currently subscribed to. Using the optional modifier
        ///parameters you can enable additional information per client.
        ///
        ///Here is a list of the additional display paramters you will receive for
        ///each of the possi [rest of string was truncated]&quot;;.
        /// </summary>
        public static string clientlist {
            get {
                return ResourceManager.GetString("clientlist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: clientmove cid={channelID} [cpw={channelPassword}] clid={clientID}...
        ///
        ///Moves one or more clients specified with clid to the channel with ID cid. If 
        ///the target channel has a password, it needs to be specified with cpw. If the 
        ///channel has no password, the parameter can be omitted.
        ///
        ///Example:
        ///   clientmove cid=3 clid=5|clid=6
        ///   error id=0 msg=ok.
        /// </summary>
        public static string clientmove {
            get {
                return ResourceManager.GetString("clientmove", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: clientmute clid={clientID1}...
        ///
        ///Mutes one or more clients specified with clid. Also adds the specified client
        ///to the FriendFoe list to make sure this mute is permanent...
        ///
        ///Example:
        ///   clientmute clid=5|clid=6
        ///   error id=0 msg=ok.
        /// </summary>
        public static string clientmute {
            get {
                return ResourceManager.GetString("clientmute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: clientnotifyregister schandlerid=&lt;serverConnectionHandlerID&gt; event=&lt;event&gt;
        ///
        ///This command allows you to listen to events that the client encounters. Events
        ///are things like people starting or stopping to talk, people joining or leaving,
        ///new channels being created and many more.
        ///It registers for client notifications for the specified
        ///serverConnectionHandlerID. If the serverConnectionHandlerID is set to zero it
        ///applies to all server connection handlers. Possible event values are listed
        ///below, add [rest of string was truncated]&quot;;.
        /// </summary>
        public static string clientnotifyregister {
            get {
                return ResourceManager.GetString("clientnotifyregister", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: clientnotifyunregister
        ///
        ///Unregisters from all previously registered client notifications.
        ///
        ///Example:
        ///   clientnotifyunregister
        ///   error id=0 msg=ok.
        /// </summary>
        public static string clientnotifyunregister {
            get {
                return ResourceManager.GetString("clientnotifyunregister", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: clientpermlist cldbid={clientDBID} [-permsid]
        ///
        ///Displays a list of permissions defined for a client.
        ///
        ///Example:
        ///   clientpermlist cldbid=2
        ///   cldbid=2 permid=4353 permvalue=1 permnegated=0 permskip=0|permid=17276 ...
        ///   error id=0 msg=ok.
        /// </summary>
        public static string clientpermlist {
            get {
                return ResourceManager.GetString("clientpermlist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: clientpoke msg={txt} clid={clientID}
        ///
        ///Sends a poke message to the client specified with clid.
        ///
        ///Example:
        ///   clientpoke msg=Wake\sup! clid=5
        ///   error id=0 msg=ok.
        /// </summary>
        public static string clientpoke {
            get {
                return ResourceManager.GetString("clientpoke", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: clientunmute clid={clientID1}...
        ///
        ///Unmutes one or more clients specified with clid.
        ///
        ///Example:
        ///   clientunmute clid=5|clid=6
        ///   error id=0 msg=ok.
        /// </summary>
        public static string clientunmute {
            get {
                return ResourceManager.GetString("clientunmute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: clientupdate ident=value...
        ///
        ///Sets one or more values concerning your own client, and makes them available
        ///to other clients through the server where applicable. Available idents are:
        ///
        ///client_nickname:             set a new nickname
        ///client_away:                 0 or 1, set us away or back available
        ///client_away_message:         what away message to display when away
        ///client_input_muted:          0 or 1, mutes or unmutes microphone
        ///client_output_muted:         0 or 1, mutes or unmutes speakers/he [rest of string was truncated]&quot;;.
        /// </summary>
        public static string clientupdate {
            get {
                return ResourceManager.GetString("clientupdate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: clientvariable ( clid={clientID} properties )...
        ///
        ///Retrieves client variables from the client (no network usage). For each client
        ///you can specify one or more properties that should be queried, and this whole
        ///block of clientID and properties can be repeated to get information about
        ///multiple clients with one call of clientvariable.
        ///
        ///Available properties are:
        ///client_unique_identifier
        ///client_nickname
        ///client_input_muted
        ///client_output_muted
        ///client_outputonly_muted
        ///client_input_hardware
        ///client_ [rest of string was truncated]&quot;;.
        /// </summary>
        public static string clientvariable {
            get {
                return ResourceManager.GetString("clientvariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: complainadd tcldbid={targetClientDBID} message={text}
        ///
        ///Submits a complaint about the client with database ID tcldbid to the server.
        ///
        ///Example:
        ///   complainadd tcldbid=3 message=Bad\sguy!
        ///   error id=0 msg=ok.
        /// </summary>
        public static string complainadd {
            get {
                return ResourceManager.GetString("complainadd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: complaindel tcldbid={targetClientDBID} fcldbid={fromClientDBID}
        ///
        ///Deletes the complaint about the client with database ID tcldbid submitted by 
        ///the client with database ID fcldbid from the server.
        ///
        ///Example:
        ///   complaindel tcldbid=3 fcldbid=4
        ///   error id=0 msg=ok.
        /// </summary>
        public static string complaindel {
            get {
                return ResourceManager.GetString("complaindel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: complaindelall tcldbid={targetClientDBID}
        ///
        ///Deletes all complaints about the client with database ID tcldbid from 
        ///the server.
        ///
        ///Example:
        ///   complaindelall tcldbid=3
        ///   error id=0 msg=ok.
        /// </summary>
        public static string complaindelall {
            get {
                return ResourceManager.GetString("complaindelall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: complainlist [tcldbid={targetClientDBID}]
        ///
        ///Displays a list of complaints on the selected virtual server. If tcldbid is 
        ///specified, only complaints about the targeted client will be shown.
        ///
        ///Example:
        ///   complainlist tcldbid=3
        ///   tcldbid=3 tname=Julian fcldbid=56 fname=Sven message=Bad\sguy! ...
        ///   error id=0 msg=ok.
        /// </summary>
        public static string complainlist {
            get {
                return ResourceManager.GetString("complainlist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: currentschandlerid
        ///
        ///Get server connection handler ID of current server tab.
        ///
        ///Example:
        ///   currentschandlerid
        ///   schandlerid=1
        ///   error id=0 msg=ok.
        /// </summary>
        public static string currentschandlerid {
            get {
                return ResourceManager.GetString("currentschandlerid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: ftcreatedir cid={channelID} cpw={channelPassword} dirname={dirPath}
        ///
        ///Creates new directory in a channels file repository.
        ///
        ///Example:
        ///   ftcreatedir cid=2 cpw= dirname=\/My\sDirectory
        ///   error id=0 msg=ok.
        /// </summary>
        public static string ftcreatedir {
            get {
                return ResourceManager.GetString("ftcreatedir", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: ftdeletefile cid={channelID} cpw={channelPassword} name={filePath}...
        ///
        ///Deletes one or more files stored in a channels file repository.
        ///
        ///Example:
        ///   ftdeletefile cid=2 cpw= name=\/Pic1.PNG|name=\/Pic2.PNG
        ///   error id=0 msg=ok.
        /// </summary>
        public static string ftdeletefile {
            get {
                return ResourceManager.GetString("ftdeletefile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: ftgetfileinfo cid={channelID} cpw={channelPassword} name={filePath}...
        ///
        ///Displays detailed information about one or more specified files stored in a 
        ///channels file repository.
        ///
        ///Example:
        ///   ftgetfileinfo cid=2 cpw= name=\/Pic1.PNG|cid=2 cpw= name=\/Pic2.PNG
        ///   cid=2 path=\/ name=Stuff size=0 datetime=1259415210 type=0|name=Pic1.PNG 
        ///   size=563783 datetime=1259425462 type=1|name=Pic2.PNG ...
        ///   error id=0 msg=ok.
        /// </summary>
        public static string ftgetfileinfo {
            get {
                return ResourceManager.GetString("ftgetfileinfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: ftgetfilelist cid={channelID} cpw={channelPassword} path={filePath}
        ///
        ///Displays a list of files and directories stored in the specified channels file 
        ///repository.
        ///
        ///Example:
        ///   ftgetfilelist cid=2 cpw= path=\/
        ///   cid=2 path=\/ name=Stuff size=0 datetime=1259415210 type=0|name=Pic1.PNG 
        ///   size=563783 datetime=1259425462 type=1|name=Pic2.PNG ...
        ///   error id=0 msg=ok.
        /// </summary>
        public static string ftgetfilelist {
            get {
                return ResourceManager.GetString("ftgetfilelist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: ftinitdownload clientftfid={clientFileTransferID} name={filePath} 
        ///       cid={channelID} cpw={channelPassword} seekpos={seekPosition}
        ///
        ///Initializes a file transfer download. clientftfid is an arbitrary ID to 
        ///identify the file transfer on client-side. On success, the server generates 
        ///a new ftkey which is required to start downloading the file through 
        ///TeamSpeak 3&apos;s file transfer interface.
        ///
        ///Example:
        ///   ftinitdownload clientftfid=1 name=\/image.iso cid=5 cpw= seekpos=0
        ///   clientftfid=1 serv [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ftinitdownload {
            get {
                return ResourceManager.GetString("ftinitdownload", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: ftinitupload clientftfid={clientFileTransferID} name={filePath} 
        ///       cid={channelID} cpw={channelPassword} size={fileSize} overwrite={1|0} 
        ///	     resume={1|0}
        ///
        ///Initializes a file transfer upload. clientftfid is an arbitrary ID to identify 
        ///the file transfer on client-side. On success, the server generates a new ftkey 
        ///which is required to start uploading the file through TeamSpeak 3&apos;s file 
        ///transfer interface.
        ///
        ///Example:
        ///   ftinitupload clientftfid=1 name=\/image.iso cid=5 cpw= size=67346 [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ftinitupload {
            get {
                return ResourceManager.GetString("ftinitupload", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: ftlist
        ///
        ///Displays a list of running file transfers on the selected virtual server. The 
        ///output contains the path to which a file is uploaded to, the current transfer 
        ///rate in bytes per second, etc.
        ///
        ///Example:
        ///   ftlist
        ///   clid=2 path=files\/virtualserver_1\/channel_5 name=image.iso size=673460224 
        ///   sizedone=450756 clientftfid=2 serverftfid=6 sender=0 status=1 ...
        ///   error id=0 msg=ok.
        /// </summary>
        public static string ftlist {
            get {
                return ResourceManager.GetString("ftlist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: ftrenamefile cid={channelID} cpw={channelPassword} 
        ///       [tcid={targetChannelID}] [tcpw={targetChannelPassword}] 
        ///	   oldname={oldFilePath} newname={newFilePath}
        ///
        ///Renames a file in a channels file repository. If the two parameters tcid and 
        ///tcpw are specified, the file will be moved into another channels file 
        ///repository.
        ///
        ///Example:
        ///   ftrenamefile cid=2 cpw= tcid=3 tcpw= oldname=\/Pic3.PNG newname=\/Pic3.PNG
        ///   error id=0 msg=ok.
        /// </summary>
        public static string ftrenamefile {
            get {
                return ResourceManager.GetString("ftrenamefile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: ftstop serverftfid={serverFileTransferID} delete={1|0}
        ///
        ///Stops the running file transfer with server-side ID serverftfid.
        ///
        ///Example:
        ///   ftstop serverftfid=2 delete=1
        ///   error id=0 msg=ok.
        /// </summary>
        public static string ftstop {
            get {
                return ResourceManager.GetString("ftstop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: hashpassword password={unhashed password}
        ///
        ///returns a passwordhash
        ///
        ///Example:
        ///   hashpassword password=roger
        ///   passwordhash=phoa3XHa3HQDeuXkTuMHE9uadFE=
        ///   error id=0 msg=ok.
        /// </summary>
        public static string hashpassword {
            get {
                return ResourceManager.GetString("hashpassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TeamSpeak 3 Client :: ClientQuery
        ///(c) TeamSpeak Systems GmbH
        ///
        ///Command Overview:
        ///   help                        | read help files
        ///   quit                        | close connection
        ///   use                         | select server connection handler
        ///   auth                        | authenticate telnet connection with users API key
        ///
        ///   banadd                      | add a new ban rule to the server
        ///   banclient                   | ban a client from the server 
        ///   bandelall                   | delete all [rest of string was truncated]&quot;;.
        /// </summary>
        public static string help {
            get {
                return ResourceManager.GetString("help", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: messageadd cluid={clientUID} subject={subject} message={text}
        ///
        ///Sends an offline message to the client specified by cluid.
        ///
        ///Example:
        ///   messageadd cluid=oHhi9WzXLNEFQOwAu4JYKGU+C+c= subject=Hi! message=Hello?!?
        ///   error id=0 msg=ok.
        /// </summary>
        public static string messageadd {
            get {
                return ResourceManager.GetString("messageadd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: messagedel msgid={messageID}
        ///
        ///Deletes an existing offline message with ID msgid from your inbox.
        ///
        ///Example:
        ///   messagedel msgid=4
        ///   error id=0 msg=ok.
        /// </summary>
        public static string messagedel {
            get {
                return ResourceManager.GetString("messagedel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: messageget msgid={messageID}
        ///
        ///Displays an existing offline message with ID msgid from your inbox. Please note 
        ///that this does not automatically set the flag_read property of the message.
        ///
        ///Example:
        ///   messageget msgid=4
        ///   msgid=4 cluid=xwEzb5ENOaglVHu9oelK++reUyE= subject=Hi! message=Hello?!?
        ///   error id=0 msg=ok.
        /// </summary>
        public static string messageget {
            get {
                return ResourceManager.GetString("messageget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: messagelist
        ///
        ///Displays a list of offline messages you&apos;ve received. The output contains the 
        ///senders unique identifier, the messages subject, etc.
        ///
        ///Example:
        ///   messagelist
        ///   msgid=4 cluid=xwEzb5ENOaglVHu9oelK++reUyE= subject=Test flag_read=0 ...
        ///   error id=0 msg=ok.
        /// </summary>
        public static string messagelist {
            get {
                return ResourceManager.GetString("messagelist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: messageupdateflag msgid={messageID} flag={1|0}
        ///
        ///Updates the flag_read property of the offline message specified with msgid. If 
        ///flag is set to 1, the message will be marked as read.
        ///
        ///Example:
        ///   messageupdateflag msgid=4 flag=1
        ///   error id=0 msg=ok.
        /// </summary>
        public static string messageupdateflag {
            get {
                return ResourceManager.GetString("messageupdateflag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: permoverview cid={channelID} cldbid={clientDBID} permid={permID}
        ///
        ///Displays all permissions assigned to a client for the channel specified with 
        ///cid. If permid is set to 0, all permissions will be displayed.
        ///The output follows the following format:
        ///( t={PermGroupType} id1={id1} id2={id2} p={permissionID} v={permissionValue}
        ///  n={permissionNegated} s={permissionSkip} )...
        ///
        ///Possible PermGroupType Values:
        ///0: Server Group;      id1=serverGroupID, id2=0
        ///1: Global Client;     id1=clientDBID,    id [rest of string was truncated]&quot;;.
        /// </summary>
        public static string permoverview {
            get {
                return ResourceManager.GetString("permoverview", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: quit
        ///
        ///Closes the ClientQuery connection to the TeamSpeak 3 Client instance.
        ///
        ///Example:
        ///   quit
        ///   error id=0 msg=ok.
        /// </summary>
        public static string quit {
            get {
                return ResourceManager.GetString("quit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: sendtextmessage targetmode={1-3} [target=clientID] msg={text}
        ///
        ///Sends a text message a specified target. The type of the target is determined 
        ///by targetmode. 
        ///Available targetmodes are:
        ///1: Send private text message to a client. You must specify the target parameter
        ///2: Send message to the channel you are currently in. Target is ignored.
        ///3: Send message to the entire server. Target is ignored.
        ///
        ///Example:
        ///   sendtextmessage targetmode=2 msg=Hello\sChannel
        ///   error id=0 msg=ok.
        /// </summary>
        public static string sendtextmessage {
            get {
                return ResourceManager.GetString("sendtextmessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: serverconnectinfo
        ///
        ///Get server connection information for the currently selected server connection
        ///handler.
        ///
        ///Example:
        ///   serverconnectinfo
        ///   ip=localhost port=9987 password=secret
        ///   error id=0 msg=ok.
        /// </summary>
        public static string serverconnectinfo {
            get {
                return ResourceManager.GetString("serverconnectinfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: serverconnectionhandlerlist
        ///
        ///Displays a list of all currently active server connection handlers.
        ///
        ///Example:
        ///   serverconnectionhandlerlist
        ///   schandlerid=2|schandlerid=3|schandlerid=4
        ///   error id=0 msg=ok.
        /// </summary>
        public static string serverconnectionhandlerlist {
            get {
                return ResourceManager.GetString("serverconnectionhandlerlist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: servergroupadd name={groupName} [type={groupDbType}]
        ///
        ///Creates a new server group using the name specified with name and displays 
        ///its ID. The optional type parameter can be used to create ServerQuery groups 
        ///and template groups.
        ///
        ///Example:
        ///   servergroupadd name=Server\sAdmin
        ///   sgid=13
        ///   error id=0 msg=ok.
        /// </summary>
        public static string servergroupadd {
            get {
                return ResourceManager.GetString("servergroupadd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: servergroupaddclient sgid={groupID} cldbid={clientDBID}
        ///
        ///Adds a client to the server group specified with sgid. Please note that a 
        ///client cannot be added to default groups or template groups.
        ///
        ///Example:
        ///   servergroupaddclient sgid=16 cldbid=3
        ///   error id=0 msg=ok.
        /// </summary>
        public static string servergroupaddclient {
            get {
                return ResourceManager.GetString("servergroupaddclient", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: servergroupaddperm sgid={groupID} ( permid={permID}|permsid={permName}
        ///       permvalue={permValue} permnegated={1|0} )...
        ///       permskip={1|0}...
        ///
        ///Adds a set of specified permissions to the server group specified with sgid. 
        ///Multiple permissions can be added by providing the four parameters of each 
        ///permission. A permission can be specified by permid or permsid.
        ///
        ///Example:
        ///   servergroupaddperm sgid=13 permsid=i_channel_join_power permvalue=50 permnegated=0 permskip=0|permsid=i_client_talk_ [rest of string was truncated]&quot;;.
        /// </summary>
        public static string servergroupaddperm {
            get {
                return ResourceManager.GetString("servergroupaddperm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: servergroupclientlist sgid={groupID} [-names]
        ///
        ///Displays the IDs of all clients currently residing in the server group 
        ///specified with sgid. If you&apos;re using the -names option, the output will 
        ///also contain the last known nickname and the unique identifier of the 
        ///clients.
        ///
        ///Example:
        ///   servergroupclientlist sgid=16
        ///   cldbid=7|cldbid=8|cldbid=9|cldbid=11|cldbid=13|cldbid=16|cldbid=18
        ///   error id=0 msg=ok.
        /// </summary>
        public static string servergroupclientlist {
            get {
                return ResourceManager.GetString("servergroupclientlist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: servergroupdel sgid={groupID} force={1|0}
        ///
        ///Deletes the server group specified with sgid. If force is set to 1, the server 
        ///group will be deleted even if there are clients within.
        ///
        ///Example:
        ///   servergroupdel sgid=13
        ///   error id=0 msg=ok.
        /// </summary>
        public static string servergroupdel {
            get {
                return ResourceManager.GetString("servergroupdel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: servergroupdelclient sgid={groupID} cldbid={clientDBID}
        ///
        ///Removes a client from the server group specified with sgid.
        ///
        ///Example:
        ///   servergroupdelclient sgid=16 cldbid=3
        ///   error id=0 msg=ok.
        /// </summary>
        public static string servergroupdelclient {
            get {
                return ResourceManager.GetString("servergroupdelclient", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: servergroupdelperm sgid={groupID} permid={permID}|permsid={permName}...
        ///
        ///Removes a set of specified permissions from the server group specified with 
        ///sgid. Multiple permissions can be removed at once. A permission can be 
        ///specified by permid or permsid.
        ///
        ///Examples:
        ///   servergroupdelperm sgid=16 permid=i_channel_join_power|permid=i_client_talk_power
        ///   error id=0 msg=ok.
        /// </summary>
        public static string servergroupdelperm {
            get {
                return ResourceManager.GetString("servergroupdelperm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: servergrouplist
        ///
        ///Displays a list of server groups available. Depending on your permissions, the 
        ///output may also contain global ServerQuery groups and template groups.
        ///
        ///Example:
        ///   servergrouplist
        ///   sgid=9 name=Server\sAdmin type=1 iconid=300 savedb=1|sgid=10 name=Normal 
        ///   type=1 iconid=0 savedb=1|sgid=11 ...
        ///   error id=0 msg=ok.
        /// </summary>
        public static string servergrouplist {
            get {
                return ResourceManager.GetString("servergrouplist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: servergrouppermlist sgid={groupID} [-permsid]
        ///
        ///Displays a list of permissions assigned to the server group specified with sgid.
        ///
        ///Example:
        ///   servergrouppermlist sgid=13
        ///   permid=8470 permvalue=1 permnegated=0 permskip=0|permid=8475 permvalue=1
        ///   error id=0 msg=ok.
        /// </summary>
        public static string servergrouppermlist {
            get {
                return ResourceManager.GetString("servergrouppermlist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: servergroupsbyclientid cldbid={clientDBID}
        ///
        ///Displays all server groups the client specified with cldbid is currently 
        ///residing in.
        ///
        ///Example:
        ///   servergroupsbyclientid cldbid=18
        ///   name=Server\sAdmin sgid=6 cldbid=18
        ///   error id=0 msg=ok.
        /// </summary>
        public static string servergroupsbyclientid {
            get {
                return ResourceManager.GetString("servergroupsbyclientid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: servervariable properties
        ///
        ///Retrieves server variables from the client (no network usage). You can specify
        ///multiple properties that should be queried.
        ///
        ///Available properties are:
        ///virtualserver_name
        ///virtualserver_platform
        ///virtualserver_version
        ///virtualserver_created
        ///virtualserver_codec_encryption_mode
        ///virtualserver_default_server_group
        ///virtualserver_default_channel_group
        ///virtualserver_hostbanner_url
        ///virtualserver_hostbanner_gfx_url
        ///virtualserver_hostbanner_gfx_interval
        ///virtualserver_prior [rest of string was truncated]&quot;;.
        /// </summary>
        public static string servervariable {
            get {
                return ResourceManager.GetString("servervariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: setclientchannelgroup cgid={groupID} cid={channelID} cldbid={clientDBID}
        ///
        ///Sets the channel group of a client to the ID specified with cgid.
        ///
        ///Example:
        ///   setclientchannelgroup cgid=13 cid=15 cldbid=20
        ///   error id=0 msg=ok.
        /// </summary>
        public static string setclientchannelgroup {
            get {
                return ResourceManager.GetString("setclientchannelgroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: tokenadd tokentype={1|0} tokenid1={groupID} tokenid2={channelID} 
        ///       [tokendescription={description}] [tokencustomset={customFieldSet}]
        ///
        ///Create a new token. If tokentype is set to 0, the ID specified with tokenid1 
        ///will be a server group ID. Otherwise, tokenid1 is used as a channel group ID 
        ///and you need to provide a valid channel ID using tokenid2.
        ///
        ///The tokencustomset parameter allows you to specify a set of custom client 
        ///properties. This feature can be used when generating tokens to co [rest of string was truncated]&quot;;.
        /// </summary>
        public static string tokenadd {
            get {
                return ResourceManager.GetString("tokenadd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: tokendelete token={tokenKey}
        ///
        ///Deletes an existing token matching the token key specified with token.
        ///
        ///Example:
        ///   tokendelete token=eKnFZQ9EK7G7MhtuQB6+N2B1PNZZ6OZL3ycDp2OW
        ///   error id=0 msg=ok.
        /// </summary>
        public static string tokendelete {
            get {
                return ResourceManager.GetString("tokendelete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: tokenlist
        ///
        ///Displays a list of tokens available including their type and group IDs. Tokens 
        ///can be used to gain access to specified server or channel groups.
        ///
        ///A token is similar to a client with administrator privileges that adds you to 
        ///a certain permission group, but without the necessity of a such a client with 
        ///administrator privileges to actually exist. It is a long (random looking) 
        ///string that can be used as a ticket into a specific server group.
        ///
        ///Example:
        ///   tokenlist
        ///   token=88CV [rest of string was truncated]&quot;;.
        /// </summary>
        public static string tokenlist {
            get {
                return ResourceManager.GetString("tokenlist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: tokenuse token={tokenKey}
        ///
        ///Use a token key gain access to a server or channel group. Please note that the 
        ///server will automatically delete the token after it has 
        ///been used.
        ///
        ///Example:
        ///   tokenuse token=eKnFZQ9EK7G7MhtuQB6+N2B1PNZZ6OZL3ycDp2OW
        ///   error id=0 msg=ok.
        /// </summary>
        public static string tokenuse {
            get {
                return ResourceManager.GetString("tokenuse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: use [schandlerid={scHandlerID}] [{scHandlerID}]
        ///
        ///Selects the server connection handler scHandlerID or, if no parameter is given,
        ///the currently active server connection handler is selected.
        ///
        ///Examples:
        ///   use schandlerid=1
        ///   selected schandlerid=1
        ///   error id=0 msg=ok
        ///   
        ///   use 1
        ///   selected schandlerid=1
        ///   error id=0 msg=ok.
        /// </summary>
        public static string use {
            get {
                return ResourceManager.GetString("use", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: verifychannelpassword cid={channelID} password={channelPassword}
        ///
        ///Returns ERROR_ok if the password is correct, or ERROR_channel_invalid_password
        ///if it is not.
        ///
        ///Example:
        ///   verifychannelpassword cid=17 password=carrot
        ///   error id=0 msg=ok.
        /// </summary>
        public static string verifychannelpassword {
            get {
                return ResourceManager.GetString("verifychannelpassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: verifyserverpassword password={serverPassword}
        ///
        ///Returns ERROR_ok if the password is correct, or ERROR_server_invalid_password
        ///if it is not.
        ///
        ///Example:
        ///   verifyserverpassword password=carrot
        ///   error id=0 msg=ok.
        /// </summary>
        public static string verifyserverpassword {
            get {
                return ResourceManager.GetString("verifyserverpassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Usage: whoami
        ///
        ///Retrieves information about ourself:
        ///- ClientID (if connected)
        ///- ChannelID of the channel we are in (if connected)
        ///
        ///If not connected, an error is returned.
        ///
        ///Example:
        ///   whoami
        ///   clid=56 cid=1
        ///   error id=0 msg=ok.
        /// </summary>
        public static string whoami {
            get {
                return ResourceManager.GetString("whoami", resourceCulture);
            }
        }
    }
}
